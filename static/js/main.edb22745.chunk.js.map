{"version":3,"sources":["context/TooDooContext.js","context/TooDooProvider.js","components/AddTaskButton.jsx","components/Input.jsx","components/TaskListButtons.jsx","components/TaskList.jsx","components/Footer.jsx","components/TaskManager.jsx","pages/MainPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Context","createContext","TooDooProvider","children","useState","getFromLocalStorage","localStorage","getItem","JSON","parse","taskList","setTaskList","inputText","setInputText","editingInput","setEditingInput","filter","contextValue","filters","setFilters","TooDooContext","Provider","value","AddTaskButton","useContext","useEffect","setItem","stringify","id","type","onClick","alert","newTask","length","task","completed","isEditing","tasks","Input","placeholder","onChange","target","TaskListButtons","className","checked","e","completedTask","find","index","indexOf","handleCompleted","taskToEdit","handleEdit","icon","faEdit","newTaskList","handleDelete","faTrash","TaskList","undefined","map","handleEditingText","Footer","TaskManager","handleFilters","name","MainPage","App","document","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.edb22745.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst Context = createContext();\n// \nexport default Context;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TooDooContext from './TooDooContext';\n\nfunction TooDooProvider({ children }) {\n  const [taskList, setTaskList] = useState(() => {\n    const getFromLocalStorage = localStorage.getItem('list');\n    const listFromLocalStorage = JSON.parse(getFromLocalStorage);\n    return listFromLocalStorage || [];\n  });\n  const [inputText, setInputText] = useState('');\n  const [editingInput, setEditingInput] = useState('');\n  const [filters, setFilters] = useState({\n    filter: 'allTasks',\n  });\n\n  const contextValue = {\n    taskList,\n    setTaskList,\n    inputText,\n    setInputText,\n    editingInput,\n    setEditingInput,\n    filters,\n    setFilters,\n  }\n\n  return(\n    <TooDooContext.Provider value={ contextValue }>\n      { children }\n    </TooDooContext.Provider>\n  );\n}\n\nTooDooProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n}\n// \nexport default TooDooProvider;\n\n// Reference to get the list from local storage: https://blog.logrocket.com/using-localstorage-react-hooks/#:~:text=To%20begin%20extracting%20the%20localStorage,key)%3B%20const%20initial%20%3D%20JSON.\n// The link above helped me a lot. I was able to save items on local storage but I struggled on getting them. \n","import React, { useContext, useEffect } from 'react';\nimport TooDooContext from '../context/TooDooContext';\n\nfunction AddTaskButton() {\n  const { inputText, setInputText, taskList, setTaskList } = useContext(TooDooContext);\n\n  function handleClick() {\n    if (!inputText) return alert('Can not add an empty task');\n    const newTask = {\n      id: taskList.length + 1,\n      task: inputText,\n      completed: false,   \n      isEditing: false, \n    }\n    const tasks = [...taskList, newTask];\n    setTaskList(tasks);\n    setInputText('');\n  }\n\n  useEffect(() => {\n    localStorage.setItem('list', JSON.stringify(taskList));\n  }, [taskList]);\n\n  \n  return(\n    <button id=\"add-task-btn\" type=\"button\" onClick={ handleClick }> + </button>\n  );\n}\n// \nexport default AddTaskButton;\n","import React, { useContext } from \"react\";\nimport TooDooContext from \"../context/TooDooContext\";\nimport AddTaskButton from \"./AddTaskButton\";\n\nfunction Input() {\n  const { inputText, setInputText } = useContext(TooDooContext);\n\n  function handleChange({ target }) {\n    const { value } = target;\n    setInputText(value);\n  }\n\n  return (\n    <div id=\"add-task\">\n      <input\n        id=\"task-input\"\n        type=\"text\"\n        placeholder=\"Write your tasks\"\n        value={ inputText }\n        onChange={ handleChange }\n      />\n      <AddTaskButton />\n    </div>\n  );\n}\n// \nexport default Input;\n","import React,{ useContext } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport TooDooContext from '../context/TooDooContext'\n\nfunction TaskListButtons({ id, isEditing, completed }) {\n  const { taskList, setTaskList, editingInput, setEditingInput } = useContext(TooDooContext);\n\n  const handleCompleted = (id, { target }) => {\n    const { checked } = target;\n    const completedTask = taskList.find((task) => task.id === id);\n    const index = taskList.indexOf(completedTask);\n    taskList[index].completed = checked;\n    setTaskList([...taskList]);\n  };\n\n  const handleDelete = (id) => {\n    const newTaskList = taskList.filter((task) => task.id !== id);\n    setTaskList(newTaskList);\n  };\n\n  const handleEdit = (id) => {\n    const taskToEdit = taskList.find((task) => task.id === id);\n    const index = taskList.indexOf(taskToEdit);\n    setEditingInput(taskToEdit.task);\n    taskList[index].task = editingInput;\n    setTaskList([...taskList]);\n    if (isEditing && !editingInput) return alert('Please write something');\n    taskList[index].isEditing = !isEditing;\n  };\n  \n  return(\n    <div className=\"task-buttons\">\n      <input\n        className=\"concluded-input\"\n        type=\"checkbox\"\n        checked={ completed }\n        onClick={ (e) => handleCompleted(id, e) }\n        onChange={() => {}}\n        // ref to the expected onChange warning: https://stackoverflow.com/questions/36715901/reactjs-error-warning/36716016\n      />\n      <button\n        className=\"edit-button\"\n        type=\"button\"\n        onClick={ () => handleEdit(id) }\n      >\n        <FontAwesomeIcon icon={ faEdit } />\n      </button>\n      <button\n        className=\"delete-button\"\n        type=\"button\"\n        onClick={ () => handleDelete(id) } \n      >\n        <FontAwesomeIcon icon={ faTrash } />\n      </button>\n    </div>\n  );\n}\n// \nexport default TaskListButtons;\n","import React, { useContext } from 'react';\nimport TooDooContext from '../context/TooDooContext';\nimport TaskListButtons from './TaskListButtons';\n\nfunction TaskList() {\n  const { \n    taskList,\n    editingInput,\n    setEditingInput,\n    filters \n  } = useContext(TooDooContext);\n  const { filter } = filters;\n\n  const handleEditingText = ({ target }) => {\n    const { value } = target;\n    setEditingInput(value);\n  };\n\n  if (taskList !== [] || taskList !== undefined) {\n    return (\n      <ul id=\"task-list-container\">\n        { taskList\n            .filter((task) => {\n              if (filter === 'completed') {\n                return task.completed === true;\n              } else if (filter === 'inProgress') {\n                return task.completed === false;\n              } else if (filter === 'allTasks') {\n                return task;\n              }\n              return filter\n            })\n            .map(({ id, task, isEditing, completed }, index) => (\n          <div className=\"task-container\" key={ index }>\n            { !isEditing ? (\n              <li className=\"task\">{ task }</li>\n            ) : (\n              <input\n                type=\"text\"\n                value={ editingInput }\n                onChange={ (e) => handleEditingText(e) }\n              />\n            )}\n            <TaskListButtons id={ id } isEditing={ isEditing } completed={ completed } />\n          </div>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default TaskList;\n","import React from 'react';\n\nfunction Footer() {\n  return(\n    <footer>\n      <p>Designed and Developed by Matheus Carvalho</p>\n    </footer>\n  );\n}\n// \nexport default Footer;\n","import React, { useContext } from 'react';\nimport TooDooContext from '../context/TooDooContext';\n\nfunction TaskManager() {\n  const { setFilters } = useContext(TooDooContext);\n\n  const handleFilters = ({ target }) => {\n    const { name } = target;\n    const filters = { \n      filter: name\n     }\n    setFilters(filters);\n  };\n\n  return(\n    <div id=\"task-manager\">\n      <button\n        id=\"all-tasks-filter\"\n        type=\"button\"\n        name=\"allTasks\"\n        onClick={ (e) => handleFilters(e) }>\n          All Tasks\n        </button>\n      <button\n        id=\"in-progress-filter\"\n        type=\"button\"\n        name=\"inProgress\"\n        onClick={ (e) => handleFilters(e) }>\n          In Progress\n        </button>\n      <button\n        id=\"completed-filter\"\n        type=\"button\"\n        name=\"completed\"\n        onClick={ (e) => handleFilters(e) }>\n          Completed\n        </button>\n    </div>\n  );\n}\n\nexport default TaskManager;\n","import React from \"react\";\nimport Input from \"../components/Input\";\nimport TaskList from \"../components/TaskList\";\nimport Footer from \"../components/Footer\";\nimport TaskManager from \"../components/TaskManager\";\n\nfunction MainPage() {\n  return (\n    <div>\n      <h1 className=\"title\">Too Doo!</h1>\n      <div id=\"task-list-main-container\">\n        <Input />\n        <TaskList />\n      </div>\n      <TaskManager />\n      <Footer />\n    </div>\n  );\n}\n\nexport default MainPage;\n","import './App.css';\nimport TooDooProvider from './context/TooDooProvider';\nimport MainPage from '../src/pages/MainPage';\n\nfunction App() {\n  document.title = 'Too Doo';\n  return (\n    <TooDooProvider>\n      <div>\n        <MainPage />\n      </div>\n    </TooDooProvider>\n  );\n}\n// \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}